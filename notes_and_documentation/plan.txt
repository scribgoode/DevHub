Mission
-bring together all engineers not just software developers

NEXT STEPS:
-merge text and video chat, make sure the site can have multiple rooms of text and video chat, ringing notification
-read about django testing and implement testing for the models
-have logic to send a specifc type of meeting request
-proposed meeting spot algorithm
-search and filtering
-calendar system/meeting request list
-payment system
-make ui seemless and pretty
-invision secnarious and implement proper pay walls and access walls
-prepare terraform file, create docker, migrate database, push to aws
-test and set up our own accounnts
-bring users to site/advertise and gage retention and brainstorm whats need to make website more seemless and friendly


Key features
-profiles
    1.60 second pitch about you(highly recommened for greater chance of connecting)
    2.status: creator or recruit
    3.if creator: current projects, preferences on collarborating = hybrid, in-person, online
    4.city
    5.online notifier


Core functionalities
-possible meet up spots halfway between(coffee shops, libraries, wework)

Signup:
email/password/dob
to request or join stream meeting must finish required profile fields(this also lets you switch to creator status)


MVP
-devhub.io(this is likely going to be too expensive) or projectpal.io($32/yr on hostinger)(be careful searching domains because they probably increase the price based on hitcount) or developercentral.io
-profile/account(change and add)✔️(add last_online attribute to engineer model)
-dm system✔️
-friends list✔️
-search and filtering✔️
-live chat system✔️
-proposed meeting spot algorithm 
-meetings/simple calendar page✔️
-rating system/strike system
-something to buy(payment when request to meet is accepted?)
-once someone accepts a meeting invation you two become collaborators(messaging and video calling only become available once two people are collaborators)
-only show the elevator pitch and current projects(basically undentifiable information(censor name in elevator pitch using ai))(to encourage people to meet in person might not pay for meeting invite if they request that type of meeting)
-extensive testing on just functionality for now
-advertising plan
-people pay for access after they send three meeting invites they pay for access again
-meeting reports and selling ratings to recruiters


FUTURE IDEAS
-if you sign up for a commited meeting you have to go or you get a strike(reliability score)
-repository
-replit
-kids version
-option to do leetcode probs together on site
-pitch competitions/meetups
-youtube coding interviews and skits on the platform to advertise

LINKS TO HELPFUL FORMUS AND TUTORIALS
creating custom user model = https://docs.djangoproject.com/en/5.1/topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser
authentication system = https://www.geeksforgeeks.org/user-authentication-system-using-django/
real time chat system = https://career.proxify.io/article/real-time-chat-with-Django
**real time chat systems that supports multiple rooms = https://medium.com/@abdullafajal/how-to-create-live-chat-project-in-django-using-django-channels-a87715a517d6 
**channels docs that was the sole contributor in make text chat work = https://channels.readthedocs.io/en/latest/tutorial/part_2.html 
webrtc crashcourse = https://www.youtube.com/watch?v=FExZvpVvYxA 
    -overview of web rtc = https://www.linkedin.com/pulse/what-webrtc-good-tsahi-levent-levi-upxcf/ 
webrtc api docomentation = https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API 
    -webrtc api documentation: signaling and video calling = https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling
confirmation from a expert that you have to use webrtc protocol to have live video chat = https://pretalx.com/djangocon-us-2024/talk/QERQDS/ 
ken whitesells rtc demo to copy into my project = https://github.com/KenWhitesell/rtc_demo/blob/main/templates/base.html 
**if i try implement webrtc in js and we cant get it to work like we want it to then maybe try aiortc or agora
https://learndjango.com/tutorials/django-custom-user-model#abstractuser-vs-abstractbaseuser
https://learndjango.com/tutorials/django-log-in-email-not-username
adding custom user model fields to admin page(also look at authentication admin in closed) - https://stackoverflow.com/questions/65046722/add-a-field-to-the-django-admin-for-a-custom-user-model
show a profiles information on another page - https://www.w3schools.com/django/django_add_link_details.php
meet halfway django app - https://github.com/cszc/Meet-Halfway?tab=readme-ov-file 


THINGS TO FIX:
-need to add address and meeting prefernce information to user model, send email to users email when they get a meeting request or a message

1st Payment Window
-user clicks on send meeting request
-right after they are prompted to customize their meeting request and before submiting are told that five dollars will be charged when and if the other user accepts the invitation
-after the meeting request is sent, all hidden information about that user is revealed and chat capabilites are unlocked
-the user who accepts the invite can be given a strike if they do not show up to the meeting without canceling 24 hours prior, however the sender cannot due to them spending money
-all users videos need to be scanned by ai to remove names until after someone pays to have a meeting with them
(THIS METHOD IS LIKELY GOING TO BE TOO EXPLOITABLE BUT THERE SHOULD BE SOME SORT OF INCENTIVE TO PAY BY THE PERSON TO ENSURE RELIABILITY ON BOTH ENDS)

maybe add case study tab like successstory.com

video chat feature logic
-button beside send that says call(call can only be used if during there meeting time)
-a pop up window shows up on the other users screen sayin that the user is calling
-yes redirects them to their chat room(each personjoins the chat room and sees the others information)(the video cameras are placed above all the other information)


Filtering
-filter people by uploaded elevator pitch

Webscokets and WebRTC
-we need to be careful when launching this because i am not sure exactly if we are supposed to create a new web socket everytime or if its supposed to be like one websocket that everyone can connect to(ive been reading that 
you can accrue a lot of costs from opening a lot of websocket connections)(make sure we have llc set up)
-just found out you only need one websocket endpoint(however need one for text chat and need one for video chat)
-should i only have one websocket connection text_chat and video_chat? or a websocket endpoint for both (just one for both now that handles message and webrtc)

UI Buffs
-make projects on my profile where you can add multiple projects, the project you want to display, the projects you want to show on your profile, and the ability to add people to projects
-ability to favorite profiles incase you want to send a meeting request to them later
-work ratio instead of creator and recruit(e.g 100%/0, 50%/50%, 75%/25%)(willing to ....)(or not because now its starting to feel like a negotiation and negotiations arent friendly)