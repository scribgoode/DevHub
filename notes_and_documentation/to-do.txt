Logic
room

same room 
    Leland - test
    test - Leland

different room
    Leland - test
    Leland - test2

my profile
1. render page
2. dm list should be everyone but the user
3. able to send message after clicking on dm list buttons

send Logic
disable send button until
    create socket to server based on dm list buttons
    enable send button once socket is created

other profile
1. render page
2. no dm list - just chatbox
3. if first time sender
        chatbox = empty
        after send message
        chatbox is updated
    else
        chatbox should populate with chat history

Bugs
1. message sending more than once (FIXED)
2. message sending to user is not saving

to-do
1. scroll feature - chat overflow
2. timestamps on messages



# others
Once submit meeting form, should notify the user that the meeting was sent

# Notification
1. Change in status for sent_meeting (accept/decline/reschedule/cancel)
    - Upon accepted ->  (additionally send email or text)
2. Recieving the meeting request
3. 24 hours before the meeting (additionally send email or text)
4. Review the meeting once the meeting is over
5. That meeting the going on - meeting started
6. 



# 4/9
request meeting has notifications
to-do:
mark them as read
if offline, need to implement a way to see those notifications afterwards as well
- work on video chat logic as well

# 4/15
meeting request notification is updated real time and after if the users logs back in
users can mark them as read afterwards

meeting request notification request updated for video and inperson meetings
to-do:
- maybe when they mark as read - redirect to my_profile? maybe kinda annoying
- implement meeting object notifications.






celery implemented


1. add task id to meeting object (store task id from celery) ✅
    - add task to send notification 24 hours before meeting starts
2. create task when meeting object is created ✅
3. if meeting is cancel -> call cancel_task -> skip the task in the meeting when time comes ✅
4. meeting_tasks is called when eta is has_reviewed ✅
5. live update to status by system ✅
6. Once last user submits their review, it will update the review status to completed (without using celery) ✅



problems:
ensure server time is UTC


created middleware but need to ensure that it is running

client
1.  Client registers ✅ or logs in
2.  Retrieve client’s timezone using JavaScript:
    Intl.DateTimeFormat().resolvedOptions().timeZone  // e.g. "America/New_York"
3. Send and store timezone in user profile:
{ "timezone": "America/New_York" }


server
4. Activate user's timezone for every request using middleware:
timezone.activate(request.user.profile.timezone)

Client → Server (User Schedules a Time)
5. User picks a local time (e.g., 3:00 PM EST)
6. Client sends time with timezone offset OR as ISO 8601 aware datetime
{ "start_time": "2025-05-06T15:00:00-05:00" }
7. Server translates to UTC and stores (handled automatically by USE_TZ = True)

Server → Client (Show Event Time)
8. Server retrieves UTC datetime from the DB
9. Django activates the user's timezone (via middleware)
10. Django templates or serializers convert UTC → user’s local time automatically
{{ meeting.start_time|localtime|date:"M d, Y h:i A T" }}
11. Client receives datetime already translated, or receives UTC and converts it in JS
new Date("2025-05-06T20:00:00Z").toLocaleString(undefined, {
  timeZone: userTimeZone
});










5/15
1. meeting request and meeting objects are both using user time and being stored in UTC on the server
2. need to update notification to show user timezone
3. need to ensure dates are stored correctly.